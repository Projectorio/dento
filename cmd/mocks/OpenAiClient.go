// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	goopenai "github.com/franciscoescher/goopenai"
	mock "github.com/stretchr/testify/mock"
)

// OpenAiClient is an autogenerated mock type for the OpenAiClient type
type OpenAiClient struct {
	mock.Mock
}

// CreateCompletions provides a mock function with given fields: ctx, req
func (_m *OpenAiClient) CreateCompletions(ctx context.Context, req goopenai.CreateCompletionsRequest) (goopenai.CreateCompletionsResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 goopenai.CreateCompletionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goopenai.CreateCompletionsRequest) (goopenai.CreateCompletionsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goopenai.CreateCompletionsRequest) goopenai.CreateCompletionsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(goopenai.CreateCompletionsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, goopenai.CreateCompletionsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOpenAiClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewOpenAiClient creates a new instance of OpenAiClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOpenAiClient(t mockConstructorTestingTNewOpenAiClient) *OpenAiClient {
	mock := &OpenAiClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
